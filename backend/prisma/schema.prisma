// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  emailVerified Boolean @default(false) @map("email_verified")
  userType     UserType @map("user_type") // CLIENT: 利用のみ, SPONSOR: 提供+利用, ADMIN: 管理
  name         String
  profileImage String?  @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  usedInviteCodes InviteCode[] @relation("InviteCodeUser")
  createdInviteCodes InviteCode[] @relation("InviteCodeCreator")
  emailVerificationTokens EmailVerificationToken[]
  sentInviteEmails InviteEmailLog[]
  services       Service[] // SPONSORのみがサービスを提供可能
  clientBookings Booking[]   @relation("ClientBookings") // CLIENT or SPONSORが利用者として申し込んだBooking
  sponsorBookings Booking[]  @relation("SponsorBookings") // SPONSORが提供者として受けたBooking
  sentMessages   Message[]   @relation("SentMessages")
  clientConversations Conversation[] @relation("ClientConversations") // 利用者側としての会話
  sponsorConversations Conversation[] @relation("SponsorConversations") // 提供者側としての会話
  clientReviews Review[] @relation("ClientReviews") // 利用者として投稿したレビュー
  sponsorReviews Review[] @relation("SponsorReviews") // 提供者として受け取ったレビュー

  @@map("users")
}

model InviteCode {
  id        String           @id @default(uuid())
  code      String           @unique
  userType  UserType         @map("user_type")
  status    InviteCodeStatus @default(ACTIVE)
  expiresAt DateTime?        @map("expires_at")
  memo      String?          @db.VarChar(500)
  usedBy    String?          @map("used_by")
  usedAt    DateTime?        @map("used_at")
  createdBy String           @map("created_by")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relations
  user         User?             @relation("InviteCodeUser", fields: [usedBy], references: [id])
  creator      User              @relation("InviteCodeCreator", fields: [createdBy], references: [id])
  emailLogs    InviteEmailLog[]

  @@index([usedBy])
  @@index([createdBy])
  @@index([status])
  @@map("invite_codes")
}

model EmailVerificationToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @map("user_id")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("email_verification_tokens")
}

model InviteEmailLog {
  id             String          @id @default(uuid())
  inviteCodeId   String          @map("invite_code_id")
  recipientEmail String          @map("recipient_email")
  recipientName  String?         @map("recipient_name")
  sentAt         DateTime        @map("sent_at")
  sentBy         String          @map("sent_by")
  status         EmailSendStatus
  errorMessage   String?         @map("error_message") @db.Text
  emailSubject   String          @map("email_subject")
  emailBody      String          @map("email_body") @db.Text
  createdAt      DateTime        @default(now()) @map("created_at")

  // Relations
  inviteCode InviteCode @relation(fields: [inviteCodeId], references: [id], onDelete: Cascade)
  sender     User       @relation(fields: [sentBy], references: [id])

  @@index([inviteCodeId])
  @@index([sentBy])
  @@map("invite_email_logs")
}

model Service {
  id           String   @id @default(uuid())
  sponsorId    String   @map("sponsor_id")
  title        String
  description  String   @db.Text
  category     ServiceCategory
  price        Decimal  @db.Decimal(10, 2)
  feeRate      FeeRate  @map("fee_rate")
  isActive     Boolean  @default(true) @map("is_active")
  imageUrl     String?  @map("image_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  sponsor      User      @relation(fields: [sponsorId], references: [id])
  bookings     Booking[]
  reviews      Review[]

  @@index([sponsorId])
  @@index([category])
  @@map("services")
}

model Booking {
  id           String   @id @default(uuid())
  serviceId    String   @map("service_id")
  clientId     String   @map("client_id") // サービス利用者（CLIENT or SPONSOR）
  sponsorId    String   @map("sponsor_id") // サービス提供者（必ずSPONSOR）
  status       BookingStatus @default(PENDING)
  totalPrice   Decimal  @db.Decimal(10, 2) @map("total_price")
  feeAmount    Decimal  @db.Decimal(10, 2) @map("fee_amount")
  paymentIntentId String? @map("payment_intent_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  completedAt  DateTime? @map("completed_at")

  // Relations
  service      Service  @relation(fields: [serviceId], references: [id])
  client       User     @relation("ClientBookings", fields: [clientId], references: [id])
  sponsor      User     @relation("SponsorBookings", fields: [sponsorId], references: [id])
  review       Review?

  @@index([serviceId])
  @@index([clientId])
  @@index([sponsorId])
  @@index([status])
  @@map("bookings")
}

model Conversation {
  id           String   @id @default(uuid())
  clientId     String   @map("client_id") // サービス利用者（CLIENT or SPONSOR）
  sponsorId    String   @map("sponsor_id") // サービス提供者（必ずSPONSOR）
  lastMessageAt DateTime? @map("last_message_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  client       User      @relation("ClientConversations", fields: [clientId], references: [id])
  sponsor      User      @relation("SponsorConversations", fields: [sponsorId], references: [id])
  messages     Message[]

  @@unique([clientId, sponsorId])
  @@index([clientId])
  @@index([sponsorId])
  @@map("conversations")
}

model Message {
  id           String   @id @default(uuid())
  conversationId String @map("conversation_id")
  senderId     String   @map("sender_id")
  content      String   @db.Text
  isRead       Boolean  @default(false) @map("is_read")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

model Review {
  id           String   @id @default(uuid())
  bookingId    String   @unique @map("booking_id")
  serviceId    String   @map("service_id")
  clientId     String   @map("client_id")
  sponsorId    String   @map("sponsor_id")
  rating       Int
  comment      String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  booking      Booking  @relation(fields: [bookingId], references: [id])
  service      Service  @relation(fields: [serviceId], references: [id])
  client       User     @relation("ClientReviews", fields: [clientId], references: [id])
  sponsor      User     @relation("SponsorReviews", fields: [sponsorId], references: [id])

  @@index([serviceId])
  @@index([clientId])
  @@index([sponsorId])
  @@map("reviews")
}

enum UserType {
  CLIENT  // サービス利用のみ可能
  SPONSOR // サービス提供と利用の両方が可能
  ADMIN   // 管理機能のみ
}

enum ServiceCategory {
  IT_DEVELOPMENT
  CONSULTING
  MARKETING
  LIFESTYLE
  INVESTMENT
}

enum FeeRate {
  RATE_20
  RATE_30
  RATE_40
  RATE_50
}

enum BookingStatus {
  PENDING
  ACCEPTED
  PAID
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum InviteCodeStatus {
  ACTIVE
  USED
  EXPIRED
  DISABLED
}

enum EmailSendStatus {
  SUCCESS
  FAILED
}
