// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  userType     UserType @map("user_type")
  name         String
  profileImage String?  @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  usedInviteCode InviteCode? @relation("InviteCodeUser")
  services       Service[]
  clientBookings Booking[]   @relation("ClientBookings")
  sponsorBookings Booking[]  @relation("SponsorBookings")
  sentMessages   Message[]   @relation("SentMessages")
  clientConversations Conversation[] @relation("ClientConversations")
  sponsorConversations Conversation[] @relation("SponsorConversations")
  clientReviews Review[] @relation("ClientReviews")
  sponsorReviews Review[] @relation("SponsorReviews")

  @@map("users")
}

model InviteCode {
  id       String   @id @default(uuid())
  code     String   @unique
  userType UserType @map("user_type")
  usedBy   String?  @unique @map("used_by")
  createdAt DateTime @default(now()) @map("created_at")
  usedAt   DateTime? @map("used_at")

  // Relations
  user User? @relation("InviteCodeUser", fields: [usedBy], references: [id])

  @@map("invite_codes")
}

model Service {
  id           String   @id @default(uuid())
  sponsorId    String   @map("sponsor_id")
  title        String
  description  String   @db.Text
  category     ServiceCategory
  price        Decimal  @db.Decimal(10, 2)
  feeRate      FeeRate  @map("fee_rate")
  isActive     Boolean  @default(true) @map("is_active")
  imageUrl     String?  @map("image_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  sponsor      User      @relation(fields: [sponsorId], references: [id])
  bookings     Booking[]
  reviews      Review[]

  @@index([sponsorId])
  @@index([category])
  @@map("services")
}

model Booking {
  id           String   @id @default(uuid())
  serviceId    String   @map("service_id")
  clientId     String   @map("client_id")
  sponsorId    String   @map("sponsor_id")
  status       BookingStatus @default(PENDING)
  totalPrice   Decimal  @db.Decimal(10, 2) @map("total_price")
  feeAmount    Decimal  @db.Decimal(10, 2) @map("fee_amount")
  paymentIntentId String? @map("payment_intent_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  completedAt  DateTime? @map("completed_at")

  // Relations
  service      Service  @relation(fields: [serviceId], references: [id])
  client       User     @relation("ClientBookings", fields: [clientId], references: [id])
  sponsor      User     @relation("SponsorBookings", fields: [sponsorId], references: [id])
  review       Review?

  @@index([serviceId])
  @@index([clientId])
  @@index([sponsorId])
  @@index([status])
  @@map("bookings")
}

model Conversation {
  id           String   @id @default(uuid())
  clientId     String   @map("client_id")
  sponsorId    String   @map("sponsor_id")
  lastMessageAt DateTime? @map("last_message_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  client       User      @relation("ClientConversations", fields: [clientId], references: [id])
  sponsor      User      @relation("SponsorConversations", fields: [sponsorId], references: [id])
  messages     Message[]

  @@unique([clientId, sponsorId])
  @@index([clientId])
  @@index([sponsorId])
  @@map("conversations")
}

model Message {
  id           String   @id @default(uuid())
  conversationId String @map("conversation_id")
  senderId     String   @map("sender_id")
  content      String   @db.Text
  isRead       Boolean  @default(false) @map("is_read")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

model Review {
  id           String   @id @default(uuid())
  bookingId    String   @unique @map("booking_id")
  serviceId    String   @map("service_id")
  clientId     String   @map("client_id")
  sponsorId    String   @map("sponsor_id")
  rating       Int
  comment      String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  booking      Booking  @relation(fields: [bookingId], references: [id])
  service      Service  @relation(fields: [serviceId], references: [id])
  client       User     @relation("ClientReviews", fields: [clientId], references: [id])
  sponsor      User     @relation("SponsorReviews", fields: [sponsorId], references: [id])

  @@index([serviceId])
  @@index([clientId])
  @@index([sponsorId])
  @@map("reviews")
}

enum UserType {
  CLIENT
  SPONSOR
  ADMIN
}

enum ServiceCategory {
  IT_DEVELOPMENT
  CONSULTING
  MARKETING
  LIFESTYLE
  INVESTMENT
}

enum FeeRate {
  RATE_20
  RATE_30
  RATE_40
  RATE_50
}

enum BookingStatus {
  PENDING
  ACCEPTED
  PAID
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}
